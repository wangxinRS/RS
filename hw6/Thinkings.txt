
Thinking 1: 奇异值分解SVD的原理是怎样的，都有哪些应用场景？

Answer 1: 对于一般m*n矩阵A，我们有如下分解：A=P・S・QT，其中，P被称为左奇异矩阵，m*m维；Q被称为右奇异矩阵，n*n维；S的非零元素只有对角线上的A的特征值lambda1, lambda2,..., lambdak。记P的列向量为pi，Q的列向量为qj。

这样，矩阵A的奇异值分解为
A = lambda1*p1*q1T+lambda1*p1*q1T+...+lambdak*pk*qkT。

应用场景：数据降维，压缩图像，推荐系统等


Thinking 2: funkSVD, BiasSVD, SVD++算法之间的区间是怎样的？

Answer 2: funkSVD在传统SVD方法上克服了矩阵必须稠密的要求，并且将问题转化为最优化问题；BiasSVD在funkSVD方法上进一步考虑了用户和物品的偏好部分；SVD++在BiasSVD方法上进一步考虑了用户的隐式反馈。

Thinking 3: 矩阵分解算法在推荐系统中有哪些应用场景，存在哪些不足？

Answer 3: 对于推荐系统来说，有两大场景，即评分预测和Top-N推荐。矩阵分解主要应用于评分预测场景。例如，在评价网站上，用户给自己看过的电影评多少分，或者用户给自己看过的书籍评价多少分。通过矩阵分解，我们可能根据极少的观测数据来较准确的预测未观测数据。

一个很大的不足就是解释性差，类似于黑箱~

Thinking 4: item流行度在推荐系统中有怎样的应用？

Answer 4: 冷启动与个性化推荐。具体来说，就是对于新用户，在冷启动阶段采用热门推荐（基于流行度的推荐），对于老用户，更加需要长尾推荐，考虑高流行度对商品推荐的降权影响。

Thinking 5: 推荐系统的召回阶段都有哪些策略？

Answer 5: 以内容为索引的召回；以用户为索引的召回；以设备为索引的召回。


